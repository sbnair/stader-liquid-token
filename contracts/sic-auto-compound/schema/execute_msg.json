{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "transfer_rewards"
      ],
      "properties": {
        "transfer_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "undelegate_rewards"
      ],
      "properties": {
        "undelegate_rewards": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer_undelegated_rewards"
      ],
      "properties": {
        "transfer_undelegated_rewards": {
          "type": "object",
          "required": [
            "amount"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "reinvest"
      ],
      "properties": {
        "reinvest": {
          "type": "object",
          "properties": {
            "invest_transferred_rewards": {
              "type": [
                "boolean",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "redeem_rewards"
      ],
      "properties": {
        "redeem_rewards": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_airdrops"
      ],
      "properties": {
        "claim_airdrops": {
          "type": "object",
          "required": [
            "airdrop_token",
            "airdrop_token_contract",
            "amount",
            "claim_msg",
            "cw20_token_contract"
          ],
          "properties": {
            "airdrop_token": {
              "type": "string"
            },
            "airdrop_token_contract": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "claim_msg": {
              "$ref": "#/definitions/Binary"
            },
            "cw20_token_contract": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_validator"
      ],
      "properties": {
        "add_validator": {
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "replace_validator"
      ],
      "properties": {
        "replace_validator": {
          "type": "object",
          "required": [
            "dst_validator",
            "src_validator"
          ],
          "properties": {
            "dst_validator": {
              "type": "string"
            },
            "src_validator": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_validator"
      ],
      "properties": {
        "remove_validator": {
          "type": "object",
          "required": [
            "redelegate_val",
            "removed_val"
          ],
          "properties": {
            "redelegate_val": {
              "type": "string"
            },
            "removed_val": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "min_validator_pool_size": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "scc_address": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_reward_withdraw_address"
      ],
      "properties": {
        "set_reward_withdraw_address": {
          "type": "object",
          "required": [
            "reward_contract"
          ],
          "properties": {
            "reward_contract": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
