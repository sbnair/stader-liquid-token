{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "register_strategy"
      ],
      "properties": {
        "register_strategy": {
          "type": "object",
          "required": [
            "sic_contract_address",
            "strategy_name",
            "unbonding_buffer",
            "unbonding_period"
          ],
          "properties": {
            "sic_contract_address": {
              "type": "string"
            },
            "strategy_name": {
              "type": "string"
            },
            "unbonding_buffer": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "unbonding_period": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_strategy"
      ],
      "properties": {
        "update_strategy": {
          "type": "object",
          "required": [
            "strategy_id"
          ],
          "properties": {
            "is_active": {
              "type": [
                "boolean",
                "null"
              ]
            },
            "sic_contract_address": {
              "type": [
                "string",
                "null"
              ]
            },
            "strategy_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "unbonding_buffer": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "unbonding_period": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_cw20_contracts"
      ],
      "properties": {
        "register_cw20_contracts": {
          "type": "object",
          "required": [
            "airdrop_contract",
            "cw20_contract",
            "denom"
          ],
          "properties": {
            "airdrop_contract": {
              "type": "string"
            },
            "cw20_contract": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "undelegate_from_strategies"
      ],
      "properties": {
        "undelegate_from_strategies": {
          "type": "object",
          "required": [
            "strategies"
          ],
          "properties": {
            "strategies": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "fetch_undelegated_rewards_from_strategies"
      ],
      "properties": {
        "fetch_undelegated_rewards_from_strategies": {
          "type": "object",
          "required": [
            "strategies"
          ],
          "properties": {
            "strategies": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "claim_airdrops"
      ],
      "properties": {
        "claim_airdrops": {
          "type": "object",
          "required": [
            "amount",
            "claim_msg",
            "denom",
            "strategy_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "claim_msg": {
              "$ref": "#/definitions/Binary"
            },
            "denom": {
              "type": "string"
            },
            "strategy_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_user_rewards"
      ],
      "properties": {
        "update_user_rewards": {
          "type": "object",
          "required": [
            "update_user_rewards_requests"
          ],
          "properties": {
            "update_user_rewards_requests": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateUserRewardsRequest"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_user_airdrops"
      ],
      "properties": {
        "update_user_airdrops": {
          "type": "object",
          "required": [
            "update_user_airdrops_requests"
          ],
          "properties": {
            "update_user_airdrops_requests": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateUserAirdropsRequest"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "default_user_portfolio": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/UserStrategyPortfolio"
              }
            },
            "delegator_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "fallback_strategy": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "undelegate_rewards"
      ],
      "properties": {
        "undelegate_rewards": {
          "type": "object",
          "required": [
            "amount",
            "strategy_id"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "strategy_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_rewards"
      ],
      "properties": {
        "withdraw_rewards": {
          "type": "object",
          "required": [
            "strategy_id",
            "undelegation_id"
          ],
          "properties": {
            "strategy_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "undelegation_id": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw_airdrops"
      ],
      "properties": {
        "withdraw_airdrops": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "deposit_funds"
      ],
      "properties": {
        "deposit_funds": {
          "type": "object",
          "properties": {
            "strategy_override": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_user_portfolio"
      ],
      "properties": {
        "update_user_portfolio": {
          "type": "object",
          "required": [
            "user_portfolio"
          ],
          "properties": {
            "user_portfolio": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserStrategyPortfolio"
              }
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "UpdateUserAirdropsRequest": {
      "type": "object",
      "required": [
        "pool_airdrops",
        "user"
      ],
      "properties": {
        "pool_airdrops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "user": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "UpdateUserRewardsRequest": {
      "type": "object",
      "required": [
        "funds",
        "user"
      ],
      "properties": {
        "funds": {
          "$ref": "#/definitions/Uint128"
        },
        "strategy_id": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "user": {
          "$ref": "#/definitions/Addr"
        }
      }
    },
    "UserStrategyPortfolio": {
      "type": "object",
      "required": [
        "deposit_fraction",
        "strategy_id"
      ],
      "properties": {
        "deposit_fraction": {
          "$ref": "#/definitions/Uint128"
        },
        "strategy_id": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    }
  }
}
